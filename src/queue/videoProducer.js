const connectRabbitMQ = require("../config/rabbitmq");

// üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—á–µ—Ä–µ–¥—å RabbitMQ
const sendVideoForProcessing = async (videoId, videoData) => {
  try {
    const { channel } = await connectRabbitMQ();
    const queue = "video_processing_queue";

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await channel.assertQueue(queue, { durable: true });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = JSON.stringify({ videoId, videoData });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
    channel.sendToQueue(queue, Buffer.from(message), { persistent: true });

    console.log(`[QUEUE][SEND] ‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: videoId=${videoId}`);

    return { message: "–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É" };
  } catch (error) {
    console.error(`[QUEUE][SEND] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: ${error.message}`);
    throw error;
  }
};

module.exports = sendVideoForProcessing;