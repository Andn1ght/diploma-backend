const connectRabbitMQ = require("../config/rabbitmq");
const ProcessedVideoRepository = require("../repositories/processedVideoRepository");
const DetectionReportRepository = require("../repositories/detectionReportRepository");
const { sendWebSocketNotification } = require("../websockets/websocketService");

const OUTPUT_QUEUE = "processed_video_queue";

// üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ
const processVideoResults = async () => {
  try {
    const { channel } = await connectRabbitMQ();

    await channel.assertQueue(OUTPUT_QUEUE, { durable: true });

    console.log(`üì° [QUEUE][LISTEN] –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${OUTPUT_QUEUE}`);

    channel.consume(
      OUTPUT_QUEUE,
      async (msg) => {
        if (!msg) return;

        try {
          const data = JSON.parse(msg.content.toString());
          const videoId = data.videoId;
          const processedVideoBuffer = Buffer.from(data.processedVideo.data); // –±–∏–Ω–∞—Ä–Ω–æ–µ –≤–∏–¥–µ–æ
          const jsonReport = JSON.stringify(data.report); // JSON –æ—Ç—á—ë—Ç

          if (!videoId || !processedVideoBuffer || !jsonReport) {
            console.warn(`[QUEUE][RECEIVE] ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π (videoId=${videoId})`);
            return channel.nack(msg, false, false); // –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
          }

          console.log(`[QUEUE][RECEIVE] üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: videoId=${videoId}`);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
          await ProcessedVideoRepository.storeProcessedVideo(videoId, processedVideoBuffer);
          console.log(`[DB] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${videoId}`);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON-–æ—Ç—á—ë—Ç
          await DetectionReportRepository.storeDetectionReport(videoId, jsonReport);
          console.log(`[DB] ‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${videoId}`);

          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ—Ä–æ–Ω—Ç
          sendWebSocketNotification(videoId, "completed");

          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          channel.ack(msg);
          console.log(`[QUEUE][ACK] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${videoId}`);
        } catch (error) {
          console.error("[QUEUE][ERROR] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
          channel.nack(msg, false, false); // –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        }
      },
      { noAck: false } // —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ ack
    );
  } catch (error) {
    console.error("[QUEUE][START] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ consumer:", error.message);
  }
};

module.exports = { processVideoResults };