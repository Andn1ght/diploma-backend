const UserRepository = require("../repositories/userRepository");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
require("dotenv").config();

class AuthService {
  // üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async register(username, email, password, role = "user") {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await UserRepository.findByEmail(email);
    if (existingUser) {
      console.warn(`[AUTH][REGISTER] ‚ö†Ô∏è Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${email}`);
      throw new Error("Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è");
    }

    // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const passwordHash = await bcrypt.hash(password, 10);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const user = await UserRepository.createUser(username, email, passwordHash, role);

    console.log(`[AUTH][REGISTER] ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.username} (${user.email})`);

    return user;
  }

  // üìå –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  static async login(email, password) {
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await UserRepository.findByEmail(email);
    if (!user) {
      console.warn(`[AUTH][LOGIN] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ email: ${email}`);
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isPasswordValid = await bcrypt.compare(password, user.password_hash);
    if (!isPasswordValid) {
      console.warn(`[AUTH][LOGIN] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è email: ${email}`);
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT-—Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { userId: user.id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    console.log(`[AUTH][LOGIN] ‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${user.username} (${user.email})`);

    return {
      token,
      user: {
        id: user.id,
        username: user.username,
        role: user.role,
      },
    };
  }
}

module.exports = AuthService;