const ProcessedVideoRepository = require("../repositories/processedVideoRepository");
const VideoRepository = require("../repositories/videoRepository")
const sendVideoForProcessing = require("../queue/videoProducer");
const multer = require("multer");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer
const storage = multer.memoryStorage();
const upload = multer({ 
  storage,
  limits: { fileSize: 500 * 1024 * 1024 }, // 500MB
  fileFilter: (req, file, cb) => {
    if (file.mimetype !== "video/mp4") {
      console.warn("[UPLOAD] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞");
      return cb(new Error("Only MP4 format is allowed"), false);
    }
    cb(null, true);
  }
});

class VideoController {
  static upload = upload.single("video");

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
  static async uploadVideo(req, res) {
    try {
      if (!req.file) {
        console.warn("[UPLOAD] ‚ùå –§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
        return res.status(400).json({ error: "–ù–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞" });
      }

      const { originalname, buffer } = req.file;
      const userId = req.user.userId;
      const storagePath = `/videos/${originalname}`;
      const title = req.body.title || "Untitled";
      const description = req.body.description || "";

      console.log(`[UPLOAD] üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${originalname} (user: ${userId})`);

      const video = await VideoRepository.uploadVideo(userId, originalname, buffer, storagePath, title, description);

      console.log(`[UPLOAD] ‚úÖ –í –ë–î: videoId=${video.id}`);
      await sendVideoForProcessing(video.id, buffer);
      console.log(`[QUEUE] üì§ –í –æ—á–µ—Ä–µ–¥—å: videoId=${video.id}`);

      res.status(201).json({ message: "–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", video });
    } catch (error) {
      console.error("[UPLOAD] ‚ùå –û—à–∏–±–∫–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // üéûÔ∏è –°—Ç—Ä–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
  static async streamProcessedVideo(req, res) {
    try {
      const { id: videoId } = req.params;
      const buffer = await ProcessedVideoRepository.getProcessedVideo(videoId);

      if (!buffer) {
        console.warn(`[STREAM] ‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${videoId}`);
        return res.status(404).json({ error: "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      console.log(`[STREAM] ‚úÖ –°—Ç—Ä–∏–º: ${videoId}`);

      res.setHeader("Content-Type", "video/mp4");
      res.setHeader("Content-Length", buffer.length);

      const { Readable } = require("stream");
      Readable.from(buffer).pipe(res);
    } catch (error) {
      console.error("[STREAM] ‚ùå –û—à–∏–±–∫–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ" });
    }
  }

  // üì• –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
  static async downloadProcessedVideo(req, res) {
    try {
      const { id: videoId } = req.params;
      const buffer = await ProcessedVideoRepository.getProcessedVideo(videoId);

      if (!buffer) {
        console.warn(`[DOWNLOAD] ‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${videoId}`);
        return res.status(404).json({ error: "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      console.log(`[DOWNLOAD] üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${videoId}`);

      res.setHeader("Content-Type", "video/mp4");
      res.setHeader("Content-Disposition", `attachment; filename="processed_${videoId}.mp4"`);
      res.setHeader("Content-Length", buffer.length);

      res.send(buffer);
    } catch (error) {
      console.error("[DOWNLOAD] ‚ùå –û—à–∏–±–∫–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ" });
    }
  }
}

module.exports = VideoController;