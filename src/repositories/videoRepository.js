const pool = require("../config/db");

class VideoRepository {
  // ‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
  static async uploadVideo(userId, filename, rawVideo, storagePath, title = "Untitled", description = "") {
    const result = await pool.query(
      `INSERT INTO uploaded_videos (
        user_id, original_filename, raw_video, storage_path, title, description
      )
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING *`,
      [userId, filename, rawVideo, storagePath, title, description]
    );
    return result.rows[0];
  }

  // üì• –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å)
  static async getUserVideos(userId) {
    const result = await pool.query(
      `SELECT 
         uv.id, 
         uv.title, 
         uv.original_filename, 
         uv.uploaded_at, 
         uv.is_favorite,
         CASE 
           WHEN pv.video_id IS NOT NULL THEN 'Processed'
           ELSE 'Processing'
         END AS status
       FROM uploaded_videos uv
       LEFT JOIN processed_videos pv ON uv.id = pv.video_id
       WHERE uv.user_id = $1 AND uv.is_deleted = FALSE
       ORDER BY uv.uploaded_at DESC`,
      [userId]
    );
    return result.rows;
  }

  // üîç –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ –≤–∏–¥–µ–æ –ø–æ ID
  static async getVideoById(videoId) {
    const result = await pool.query("SELECT * FROM uploaded_videos WHERE id = $1", [videoId]);
    return result.rows[0];
  }

  // üóëÔ∏è –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
  static async deleteVideo(videoId) {
    await pool.query("UPDATE uploaded_videos SET is_deleted = TRUE WHERE id = $1", [videoId]);
    return { message: "Video marked as deleted" };
  }

  // ‚≠ê –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
  static async getFavorites(userId) {
    const result = await pool.query(
      `SELECT 
         id, 
         title, 
         uploaded_at 
       FROM uploaded_videos
       WHERE user_id = $1 AND is_favorite = TRUE AND is_deleted = FALSE
       ORDER BY uploaded_at DESC`,
      [userId]
    );
    return result.rows;
  }

  // üïò –ü–æ—Å–ª–µ–¥–Ω–∏–µ N –≤–∏–¥–µ–æ
  static async getRecentUserVideos(userId, limit = 5) {
    const result = await pool.query(
      `SELECT 
         id, 
         title, 
         uploaded_at 
       FROM uploaded_videos
       WHERE user_id = $1 AND is_deleted = FALSE
       ORDER BY uploaded_at DESC
       LIMIT $2`,
      [userId, limit]
    );
    return result.rows;
  }

  // ‚≠ê –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ "–∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
  static async toggleFavorite(videoId, value) {
    await pool.query("UPDATE uploaded_videos SET is_favorite = $1 WHERE id = $2", [value, videoId]);
    return { message: value ? "Marked as favorite" : "Unmarked as favorite" };
  }
}

module.exports = VideoRepository;
